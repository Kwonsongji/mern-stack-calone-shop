{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // Reducers\n\nimport { cartReducer } from './reducers/cartReducer';\nimport { userSigninReducer, userSignupReducer } from './reducers/userReducer';\nimport { getProductsReducer, getProductDetailsReducer } from './reducers/productReducer';\nconst reducer = combineReducers({\n  cart: cartReducer,\n  //donne une nouvelle prop à cartReducer\n  getProducts: getProductsReducer,\n  getproductDetails: getProductDetailsReducer,\n  userSignin: userSigninReducer,\n  // userSignin call in\n  userSignup: userSignupReducer // constant => action => reducer => store\n\n});\nconst middleware = [thunk]; //permet de faire des promesses asynchrones\n\nconst cartFromLocalStorage = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : [];\nconst shippingAdressFromLocalStore = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {}; //garde les datas du user even refresh \n\nconst userInfoFromLocalStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst paymentMethodFromLocalStorage = 'Paypal';\nconst INITIAL_STATE = {\n  userSignin: {\n    userInfo: userInfoFromLocalStorage\n  },\n  cart: {\n    cartItems: cartFromLocalStorage,\n    shippingAddress: shippingAdressFromLocalStore,\n    paymentMethod: paymentMethodFromLocalStorage\n  }\n}; // Pour appliquer un middleware dans notre store, on utilise la fonction applyMiddleware de Redux.\n//Puis, on l'ajoute en argument de la fonction createStore.\n// Cependant, la fonction createStore ne prend qu'un seul reducer.\n// On doit donc utiliser la fonction combineReducers afin de fusionner nos différents reducers.\n\nconst store = createStore(reducer, INITIAL_STATE, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/SongJi/mern-stack-calone-shop/frontend/src/redux/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","cartReducer","userSigninReducer","userSignupReducer","getProductsReducer","getProductDetailsReducer","reducer","cart","getProducts","getproductDetails","userSignin","userSignup","middleware","cartFromLocalStorage","localStorage","getItem","JSON","parse","shippingAdressFromLocalStore","userInfoFromLocalStorage","paymentMethodFromLocalStorage","INITIAL_STATE","userInfo","cartItems","shippingAddress","paymentMethod","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,wBAArD;AACA,SAASC,kBAAT,EAA6BC,wBAA7B,QAA6D,2BAA7D;AAEA,MAAMC,OAAO,GAAGT,eAAe,CAAC;AAC9BU,EAAAA,IAAI,EAAEN,WADwB;AACX;AACnBO,EAAAA,WAAW,EAAEJ,kBAFiB;AAG9BK,EAAAA,iBAAiB,EAAEJ,wBAHW;AAI9BK,EAAAA,UAAU,EAAER,iBAJkB;AAIC;AAC/BS,EAAAA,UAAU,EAAER,iBALkB,CAKC;;AALD,CAAD,CAA/B;AAQA,MAAMS,UAAU,GAAG,CAACb,KAAD,CAAnB,C,CAA2B;;AAE3B,MAAMc,oBAAoB,GACxBC,YAAY,CAACC,OAAb,CAAqB,MAArB,IACIC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADJ,GAEI,EAHN;AAIA,MAAMG,4BAA4B,GAChCJ,YAAY,CAACC,OAAb,CAAqB,iBAArB,IACIC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADJ,GAEI,EAHN,C,CAIA;;AACA,MAAMI,wBAAwB,GAC5BL,YAAY,CAACC,OAAb,CAAqB,UAArB,IACIC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADJ,GAEI,IAHN;AAIA,MAAMK,6BAA6B,GAAG,QAAtC;AAGA,MAAMC,aAAa,GAAG;AACpBX,EAAAA,UAAU,EAAE;AACVY,IAAAA,QAAQ,EAAEH;AADA,GADQ;AAIpBZ,EAAAA,IAAI,EAAE;AACJgB,IAAAA,SAAS,EAAEV,oBADP;AAEJW,IAAAA,eAAe,EAAEN,4BAFb;AAGJO,IAAAA,aAAa,EAAEL;AAHX;AAJc,CAAtB,C,CAWA;AACA;AACA;AACA;;AACA,MAAMM,KAAK,GAAG9B,WAAW,CACvBU,OADuB,EAEvBe,aAFuB,EAGvBrB,mBAAmB,CAACF,eAAe,CAAC,GAAGc,UAAJ,CAAhB,CAHI,CAAzB;AAMA,eAAec,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Reducers\nimport { cartReducer } from './reducers/cartReducer';\nimport { userSigninReducer, userSignupReducer } from './reducers/userReducer';\nimport { getProductsReducer, getProductDetailsReducer } from './reducers/productReducer';\n\nconst reducer = combineReducers({\n  cart: cartReducer, //donne une nouvelle prop à cartReducer\n  getProducts: getProductsReducer,\n  getproductDetails: getProductDetailsReducer,\n  userSignin: userSigninReducer, // userSignin call in\n  userSignup: userSignupReducer, // constant => action => reducer => store\n})\n \nconst middleware = [thunk] //permet de faire des promesses asynchrones\n\nconst cartFromLocalStorage =\n  localStorage.getItem('cart')\n    ? JSON.parse(localStorage.getItem('cart'))\n    : [];\nconst shippingAdressFromLocalStore =\n  localStorage.getItem('shippingAddress')\n    ? JSON.parse(localStorage.getItem('shippingAddress'))\n    : {};\n//garde les datas du user even refresh \nconst userInfoFromLocalStorage =\n  localStorage.getItem('userInfo')\n    ? JSON.parse(localStorage.getItem('userInfo'))\n    : null;\nconst paymentMethodFromLocalStorage = 'Paypal'\n\n\nconst INITIAL_STATE = {\n  userSignin: {\n    userInfo: userInfoFromLocalStorage\n  },\n  cart: {\n    cartItems: cartFromLocalStorage,\n    shippingAddress: shippingAdressFromLocalStore,\n    paymentMethod: paymentMethodFromLocalStorage \n  },\n\n}\n// Pour appliquer un middleware dans notre store, on utilise la fonction applyMiddleware de Redux.\n//Puis, on l'ajoute en argument de la fonction createStore.\n// Cependant, la fonction createStore ne prend qu'un seul reducer.\n// On doit donc utiliser la fonction combineReducers afin de fusionner nos différents reducers.\nconst store = createStore(\n  reducer,\n  INITIAL_STATE,\n  composeWithDevTools(applyMiddleware(...middleware),)\n);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}