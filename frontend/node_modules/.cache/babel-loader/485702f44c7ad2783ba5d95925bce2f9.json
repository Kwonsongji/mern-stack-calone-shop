{"ast":null,"code":"import * as actionTypes from '../constants/cartConstants';\nimport axios from 'axios';\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\n  const {\n    data\n  } = await axios.get(`/api/products/${id}`);\n  dispatch({\n    type: actionTypes.ADD_TO_CART,\n    payload: {\n      product: data._id,\n      name: data.name,\n      imageUrl: data.imageUrl,\n      price: data.price,\n      countInStock: data.countInStock,\n      qty\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems)); // reducer  : cart.cartItems\n}; // on récupère l'id du produit qu'on veut supprimer\n//en argument on veut dispatcher l' action de supprimer, l'update notre localStorage avec getState\n\nexport const removeFromCart = id => (dispatch, getState) => {\n  dispatch({\n    type: actionTypes.REMOVE_FROM_CART,\n    payload: id\n  });\n  localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\n};\nexport const saveShippingAddress = data => dispatch => {\n  dispatch({\n    type: actionTypes.CART_SAVE_SHIPPING_ADDRESS,\n    payload: data\n  });\n  localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch({\n    type: actionTypes.CART_SAVE_PAYMENT_METHOD,\n    payload: data\n  });\n};","map":{"version":3,"sources":["/Users/SongJi/mern-stack-calone-shop/frontend/src/redux/actions/cartActions.js"],"names":["actionTypes","axios","addToCart","id","qty","dispatch","getState","data","get","type","ADD_TO_CART","payload","product","_id","name","imageUrl","price","countInStock","localStorage","setItem","JSON","stringify","cart","cartItems","removeFromCart","REMOVE_FROM_CART","saveShippingAddress","CART_SAVE_SHIPPING_ADDRESS","savePaymentMethod","CART_SAVE_PAYMENT_METHOD"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,4BAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,EAAD,EAAKC,GAAL,KAAa,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClE,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMN,KAAK,CAACO,GAAN,CAAW,iBAAgBL,EAAG,EAA9B,CAAvB;AAEAE,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAET,WAAW,CAACU,WADX;AAEPC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAEL,IAAI,CAACM,GADP;AAEPC,MAAAA,IAAI,EAAEP,IAAI,CAACO,IAFJ;AAGPC,MAAAA,QAAQ,EAAER,IAAI,CAACQ,QAHR;AAIPC,MAAAA,KAAK,EAAET,IAAI,CAACS,KAJL;AAKPC,MAAAA,YAAY,EAAEV,IAAI,CAACU,YALZ;AAMPb,MAAAA;AANO;AAFF,GAAD,CAAR;AAYAc,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAef,QAAQ,GAAGgB,IAAX,CAAgBC,SAA/B,CAAlC,EAfkE,CAgBlE;AACD,CAjBM,C,CAkBP;AACA;;AACC,OAAO,MAAMC,cAAc,GAAIrB,EAAD,IAAQ,CAACE,QAAD,EAAWC,QAAX,KAAwB;AAC7DD,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAET,WAAW,CAACyB,gBADX;AAENd,IAAAA,OAAO,EAAER;AAFH,GAAD,CAAR;AAIAe,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAef,QAAQ,GAAGgB,IAAX,CAAgBC,SAA/B,CAA7B;AACD,CANO;AASR,OAAO,MAAMG,mBAAmB,GAAInB,IAAD,IAAWF,QAAD,IAAc;AACzDA,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAET,WAAW,CAAC2B,0BADX;AAEPhB,IAAAA,OAAO,EAAEJ;AAFF,GAAD,CAAR;AAIAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAed,IAAf,CAAxC;AACD,CANM;AAQP,OAAO,MAAMqB,iBAAiB,GAAIrB,IAAD,IAAWF,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAET,WAAW,CAAC6B,wBADX;AAEPlB,IAAAA,OAAO,EAAEJ;AAFF,GAAD,CAAR;AAID,CALM","sourcesContent":["import * as actionTypes from '../constants/cartConstants';\nimport axios from 'axios';\n\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\n  const { data } = await axios.get(`/api/products/${id}`);\n\n  dispatch({\n    type: actionTypes.ADD_TO_CART,\n    payload: {\n      product: data._id,\n      name: data.name,\n      imageUrl: data.imageUrl,\n      price: data.price,\n      countInStock: data.countInStock,\n      qty\n    }\n  })\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems));\n  // reducer  : cart.cartItems\n}\n// on récupère l'id du produit qu'on veut supprimer\n//en argument on veut dispatcher l' action de supprimer, l'update notre localStorage avec getState\n export const removeFromCart = (id) => (dispatch, getState) => {\n  dispatch({\n    type: actionTypes.REMOVE_FROM_CART,\n     payload: id\n  })\n  localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\n};\n\n\nexport const saveShippingAddress = (data) => (dispatch) => {\n  dispatch({\n    type: actionTypes.CART_SAVE_SHIPPING_ADDRESS,\n    payload: data\n  });\n  localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\n\nexport const savePaymentMethod = (data) => (dispatch) => {\n  dispatch({\n    type: actionTypes.CART_SAVE_PAYMENT_METHOD,\n    payload: data\n  })\n};\n"]},"metadata":{},"sourceType":"module"}