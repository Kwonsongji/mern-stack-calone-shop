{"ast":null,"code":"/* eslint-disable no-case-declarations */\nimport * as actionTypes from '../constants/cartConstants';\nconst initialState = {\n  cartItems: []\n}; // Le state par défaut est l'état initial, \n//l'action par défaut est un objet vide.\n\nexport const cartReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      //1)°) ajout du produit au panier ( nouvelle donné )\n      const itemAdd = action.payload;\n      console.log('ajout du nouvelle item *itemAdd*', itemAdd); //2°) check si le produit existe bien dans le panier avec l'id \n\n      const existItem = state.cartItems.find(x => x.product === itemAdd.product);\n      console.log('check si le produit existe bien dans le panier avec l\\' id *existItem*', existItem);\n\n      if (existItem) {\n        return { ...state,\n          //on copie state initial non modifié pour accèder à la propriété cartItems\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? itemAdd : x)\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, itemAdd] // ajout du nouveau item dans l'array \n\n        };\n      }\n\n    case actionTypes.REMOVE_FROM_CART:\n      return { ...state,\n        cartItems: state.cartItems.filter(x => x.product !== action.payload)\n      };\n\n    case actionTypes.CART_SAVE_SHIPPING_ADDRESS:\n      return { ...state,\n        shippingAddress: action.payload\n      };\n\n    case actionTypes.CART_SAVE_PAYMENT_METHOD:\n      return { ...state,\n        paymentMethod: action.payload\n      };\n\n    case actionTypes.CART_EMPTY:\n      return { ...state,\n        error: '',\n        cartItems: []\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/SongJi/mern-stack-calone-shop/frontend/src/redux/reducers/cartReducer.js"],"names":["actionTypes","initialState","cartItems","cartReducer","state","action","type","ADD_TO_CART","itemAdd","payload","console","log","existItem","find","x","product","map","REMOVE_FROM_CART","filter","CART_SAVE_SHIPPING_ADDRESS","shippingAddress","CART_SAVE_PAYMENT_METHOD","paymentMethod","CART_EMPTY","error"],"mappings":"AAAA;AACA,OAAO,KAAKA,WAAZ,MAA6B,4BAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAC;AADS,CAArB,C,CAGA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAM,GAAG,EAAhC,KAAuC;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACO,WAAjB;AACE;AACA,YAAMC,OAAO,GAAGH,MAAM,CAACI,OAAvB;AAAgCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDH,OAAhD,EAFlC,CAGE;;AACA,YAAMI,SAAS,GAAGR,KAAK,CAACF,SAAN,CAAgBW,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcP,OAAO,CAACO,OAAlD,CAAlB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,wEAAZ,EAAuFC,SAAvF;;AACA,UAAIA,SAAJ,EAAe;AACb,eAAO,EACL,GAAGR,KADE;AACK;AACVF,UAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBc,GAAhB,CAAqBF,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCP,OAAlC,GAA4CM,CAAvE;AAFN,SAAP;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGV,KADE;AAELF,UAAAA,SAAS,EAAE,CAAC,GAAGE,KAAK,CAACF,SAAV,EAAqBM,OAArB,CAFN,CAEoC;;AAFpC,SAAP;AAID;;AACH,SAAKR,WAAW,CAACiB,gBAAjB;AACE,aAAO,EACL,GAAGb,KADE;AAELF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBgB,MAAhB,CAAwBJ,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcV,MAAM,CAACI,OAAnD;AAFN,OAAP;;AAID,SAAKT,WAAW,CAACmB,0BAAjB;AACC,aAAO,EACL,GAAGf,KADE;AAELgB,QAAAA,eAAe,EAAEf,MAAM,CAACI;AAFnB,OAAP;;AAIF,SAAKT,WAAW,CAACqB,wBAAjB;AACE,aAAO,EACL,GAAGjB,KADE;AAELkB,QAAAA,aAAa,EAAEjB,MAAM,CAACI;AAFjB,OAAP;;AAIF,SAAKT,WAAW,CAACuB,UAAjB;AACE,aAAO,EACL,GAAGnB,KADE;AAELoB,QAAAA,KAAK,EAAC,EAFD;AAGLtB,QAAAA,SAAS,EAAE;AAHN,OAAP;;AAMF;AACE,aAAOE,KAAP;AAzCJ;AA4CD,CA7CM","sourcesContent":["/* eslint-disable no-case-declarations */\nimport * as actionTypes from '../constants/cartConstants';\n\nconst initialState = {\n  cartItems:[]\n};\n// Le state par défaut est l'état initial, \n//l'action par défaut est un objet vide.\nexport const cartReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      //1)°) ajout du produit au panier ( nouvelle donné )\n      const itemAdd = action.payload; console.log('ajout du nouvelle item *itemAdd*', itemAdd);\n      //2°) check si le produit existe bien dans le panier avec l'id \n      const existItem = state.cartItems.find((x) => x.product === itemAdd.product);\n      console.log('check si le produit existe bien dans le panier avec l\\' id *existItem*' , existItem);\n      if (existItem) {\n        return {\n          ...state, //on copie state initial non modifié pour accèder à la propriété cartItems\n          cartItems: state.cartItems.map((x) => x.product === existItem.product ? itemAdd : x)\n        }\n      } else {\n        return {\n          ...state,\n          cartItems: [...state.cartItems, itemAdd],// ajout du nouveau item dans l'array \n        };  \n      }\n    case actionTypes.REMOVE_FROM_CART:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter((x) => x.product !== action.payload)\n      };\n     case actionTypes.CART_SAVE_SHIPPING_ADDRESS:\n      return {\n        ...state,\n        shippingAddress: action.payload\n      };\n    case actionTypes.CART_SAVE_PAYMENT_METHOD:\n      return {\n        ...state,\n        paymentMethod: action.payload\n      };\n    case actionTypes.CART_EMPTY:\n      return {\n        ...state,\n        error:'',\n        cartItems: []\n      };\n      \n    default:\n      return state;\n  }\n  \n}"]},"metadata":{},"sourceType":"module"}